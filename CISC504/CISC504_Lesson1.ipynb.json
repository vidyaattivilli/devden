{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14\n"
     ]
    }
   ],
   "source": [
    "# The print is performing an addition operation on the two numeric variables provided to it so the result is 12.\n",
    "print(12+2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "122\n"
     ]
    }
   ],
   "source": [
    "# Here, the quotes signify that the parameters are string \n",
    "# so the print statement performs a concatenate operation on strings resulting in 122.\n",
    "print('12' + '2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getMultiplicationTable(number):\n",
    "    for i in range(1,11): \n",
    "        result = i*number\n",
    "        print(i,' x ',number,' = ',result )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1  x  2  =  2\n",
      "2  x  2  =  4\n",
      "3  x  2  =  6\n",
      "4  x  2  =  8\n",
      "5  x  2  =  10\n",
      "6  x  2  =  12\n",
      "7  x  2  =  14\n",
      "8  x  2  =  16\n",
      "9  x  2  =  18\n",
      "10  x  2  =  20\n"
     ]
    }
   ],
   "source": [
    "getMultiplicationTable(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def printInLoop(name, number):\n",
    "    print((name + ' ' ) * int(number))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello how are you hello how are you hello how are you \n"
     ]
    }
   ],
   "source": [
    "printInLoop('hello how are you',3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "20\n",
      "30\n",
      "40\n",
      "50\n",
      "60\n",
      "70\n",
      "80\n",
      "90\n"
     ]
    }
   ],
   "source": [
    "for i in range(10,100):\n",
    "    if (i%10 == 0): print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Compare and contrast\n",
    "(a) High-level language vs. Machine language\n",
    "Machine language consists of binary instructions i.e. 0s and 1s. A high-level language, on the other hand, consists of human understandable instructions that are later compiled or interpreted into machine language.\n",
    "\n",
    "(b) What are some of the advantages and disadvantages of a compiler which you can think of ?\n",
    "Advantages:\n",
    "  ~ It needs to analyze the program only once.\n",
    "  ~ Compilers can point out any errors in the code before running the programming.\n",
    "  ~ They make programs run faster since the programs are already compiled into machine-language binaries and are ready to be executed.\n",
    "\n",
    "Disadvantages:\n",
    "  ~ Compilers go through all the instructions and errors and compiling large programs can take a lot of time.\n",
    "  ~ They are platform-dependent.\n",
    "  \n",
    "(c) What are some of the advantages and disadvantages of an interpreter which you can think of ?\n",
    "Advantages:\n",
    "  ~ Errors are immediately shown to the user and the program execution is halted.\n",
    "  ~ Can provide platform-independence.\n",
    "\n",
    "Disadvantages:\n",
    "  ~ Program executions are slow because they need to be translated into machine language while running.\n",
    "  ~ It needs to analyze the program everytime it is run."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
