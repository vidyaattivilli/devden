{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Exercise:</b>\n",
    "Flowchart for uploading a picture to instagram.\n",
    "\n",
    "<img src=\"images/flowchart.png\">\n",
    "\n",
    "\n",
    "\n",
    "<b>Knowledge quiz: </b>\n",
    "Create a flowchart of the algorithm described below.\n",
    "\n",
    "The user will input the weight in pounds then press enter, the weight is then converted to kilograms using the following equation: input in pounds/2.2 and then the output is displayed as the converted weight in kilograms.\n",
    "\n",
    "\n",
    "<img src=\"images/weight-conversion-flowchart.png\">"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the initial principal: 5000\n",
      "Enter the annualized interest rate: 0.2\n",
      "The amount in 10 years is: 30958.682111999995\n",
      "This program calculates the future value of a 10-year investment.\n"
     ]
    }
   ],
   "source": [
    "# Modified and coded version of Zelle Future Value example listed in Chapter 2\n",
    "principal = float(input('Enter the initial principal: '))\n",
    "apr = float(input('Enter the annualized interest rate: '))\n",
    "def main(): print ('This program calculates the future value of a 10-year investment.')\n",
    "for i in range(10):principal = principal * (1 + apr)\n",
    "print ('The amount in 10 years is:', principal)\n",
    "\n",
    "main()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#In the above code, \n",
    "# Name is 'main'\n",
    "# Expression is 'principal * (1 + apr)'\n",
    "# Output statement is 'The amount in 10 years is:'\n",
    "# Simple variable assignment is 'apr = float(input('Enter the annualized interest rate: '))'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Exercise:</b>\n",
    "Conversion of meter to yard.\n",
    "\n",
    "Requirements: As a metric user who recently moved to Minnesota, Sandy wants a mobile application that is able to easily translate faranheit to celcius to determine the kind of clothing she needs to wear as she heads out for work. \n",
    "\n",
    "Specifications: Sandy wants to be able to enter the current temperature that she finds on the thermometer (that only shows temp in faranheit) in her room and get the celcius translation for it.\n",
    "\n",
    "Flowchart:\n",
    "<img src=\"images/temp-conversion-flowchart.png\">\n",
    "\n",
    "Pseudocode:\n",
    "1. User will input the temperature in faranheit and press enter.\n",
    "2. Application will calculate the temperature in celcius using the following equation.\n",
    " temp in celcius = (temp in F - 32) * 5/9\n",
    "3. The converted value will be shown as output to the user.\n",
    "\n",
    "Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_to_celcius(faranheit): \n",
    "    return (str)((faranheit - 32) * 5/9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "What is the temperature in Faranheit? 43\n",
      "The temperature in celcius is  6.111111111111111\n"
     ]
    }
   ],
   "source": [
    "user_input = float(input('What is the temperature in Faranheit? '))\n",
    "print('The temperature in celcius is ', (convert_to_celcius(user_input)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
